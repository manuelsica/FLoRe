#!/usr/bin/env bash

########################################
# 1) Imposta permesso eseguibile su Unix (best effort)
########################################
if [ -z "$ComSpec" ]; then
  if [ ! -x "$0" ]; then
    chmod +x "$0" 2>/dev/null || true
  fi
fi

########################################
# 1.1) Rilevamento interprete Python
########################################
PYTHON=""
if command -v python3 >/dev/null 2>&1; then
  PYTHON=python3
elif command -v python >/dev/null 2>&1; then
  PYTHON=python
else
  echo "Python non trovato: impossibile installare i pacchetti."
fi

########################################
# 1.2) Installazione dei pacchetti da requirements.txt
########################################
if [ -n "$PYTHON" ]; then
  if [ -f "requirements.txt" ]; then
    echo "Installo i pacchetti Python da requirements.txt..."
    # Tenta l'installazione con --user in modalità quiet, reindirizzando gli errori per nascondere messaggi indesiderati
    if ! "$PYTHON" -m pip install --user -q -r requirements.txt 2>/dev/null; then
      echo "Tentativo di installazione con '--user' fallito. Riprovo con '--break-system-packages'..."
      "$PYTHON" -m pip install --break-system-packages -q -r requirements.txt 2>/dev/null
    fi
  else
    echo "Il file requirements.txt non esiste, salto l'installazione."
  fi
fi

########################################
# 2) Salviamo gli argomenti in ARGS
########################################
ARGS=("$@")

# JSON di default se l'utente non specifica -j
JSONFILE="results.json"

# Cerca -j tra gli argomenti
INDEX=0
for arg in "${ARGS[@]}"; do
  if [ "$arg" = "-j" ]; then
    JSONFILE="${ARGS[$((INDEX+1))]}"
    break
  fi
  INDEX=$((INDEX+1))
done

########################################
# 3) Esegui il binario C++
########################################
./FLORE_bin "${ARGS[@]}"

########################################
# 4) Se esiste Python, creiamo l'Excel
########################################

# Passiamo il valore di JSONFILE e calcoleremo l'Excel dentro Python.
export JSONFILE
if [ -n "$PYTHON" ]; then
  echo "Converto il file JSON ($JSONFILE) in un Excel con stesso nome..."
  "$PYTHON" - <<'EOF'
import sys
import os
import subprocess

################################################################################
# Installa eventuali moduli mancanti (pandas, openpyxl), se non già presenti
################################################################################
modules_to_install = []
try:
    import pandas
except ImportError:
    modules_to_install.append("pandas")
try:
    import openpyxl
    from openpyxl.styles import Font, PatternFill, Alignment
    from openpyxl.utils import get_column_letter
except ImportError:
    modules_to_install.append("openpyxl")
if modules_to_install:
    print(f"Installo automaticamente i pacchetti mancanti: {modules_to_install}")
    subprocess.run([sys.executable, "-m", "pip", "install", "--user", "-q"] + modules_to_install, check=True, stderr=subprocess.DEVNULL)

import json
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter

################################################################################
# Determina il nome del file JSON e dell'Excel corrispondente
################################################################################
json_file = os.environ.get('JSONFILE', 'results.json')
base, ext = os.path.splitext(json_file)
excel_file = base + ".xlsx" if ext.lower() == ".json" else json_file + ".xlsx"

################################################################################
# Verifica l'esistenza del file JSON
################################################################################
if not os.path.exists(json_file):
    print(f"Il file JSON '{json_file}' non esiste, salto la conversione.")
    sys.exit(0)

################################################################################
# Carica il JSON e crea l'Excel con estetica migliorata
################################################################################
with open(json_file, 'r') as f:
    data = json.load(f)
data.sort(key=lambda x: (x.get("read1", 0), x.get("read2", 0)))
df = pd.DataFrame(data)

columns = [
    "read1", "read2", "orientation1", "orientation2",
    "start1", "end1", "len_read1",
    "start2", "end2", "len_read2",
    "overlap_length", "overlap_region_read1", "fingerprint_read1",
    "overlap_region_read2", "fingerprint_read2"
]
for col in columns:
    if col not in df.columns:
        df[col] = ""
df = df[columns]

################################################################################
# Salva in Excel con formattazione
################################################################################
with pd.ExcelWriter(excel_file, engine="openpyxl") as writer:
    df.to_excel(writer, index=False, sheet_name="Results")
    worksheet = writer.sheets["Results"]

    header_font = Font(bold=True, color="FFFFFF")
    header_fill = PatternFill("solid", fgColor="4CAF50")
    for col_num, column_title in enumerate(df.columns, 1):
        cell = worksheet.cell(row=1, column=col_num)
        cell.font = header_font
        cell.fill = header_fill

    alt_fill = PatternFill("solid", fgColor="F2F2F2")
    for row_idx, row in enumerate(worksheet.iter_rows(min_row=2), start=2):
        if row_idx % 2 == 0:
            for cell in row:
                cell.fill = alt_fill
        for cell in row:
            cell.alignment = Alignment(wrap_text=True)

    for col in worksheet.columns:
        max_length = 0
        col_letter = get_column_letter(col[0].column)
        for cell in col:
            if cell.value is not None:
                length = len(str(cell.value))
                if length > max_length:
                    max_length = length
        worksheet.column_dimensions[col_letter].width = max_length + 2

print(f"File Excel creato con successo: {excel_file}")
EOF
else
  echo "Python non trovato o non disponibile: impossibile creare Excel."
fi

########################################
# 5) Se esiste Python, creiamo il grafo HTML interattivo con dettagli provenienti da graph_detailed.json
########################################

# Utilizziamo graph_detailed.json per il grafo interattivo.
export GRAPHDATA="graph_detailed.json"
if [ -n "$PYTHON" ]; then
  echo "Generazione del grafo HTML interattivo dal file JSON ($GRAPHDATA)..."
  "$PYTHON" - <<'EOF'
import sys
import os
import json
import subprocess

################################################################################
# Installa eventuali moduli mancanti (networkx, pyvis, jinja2) se non già presenti
################################################################################
modules_to_install = []
try:
    import networkx as nx
except ImportError:
    modules_to_install.append("networkx")
try:
    from pyvis.network import Network
except ImportError:
    modules_to_install.append("pyvis")
try:
    import jinja2
except ImportError:
    modules_to_install.append("jinja2")
if modules_to_install:
    print(f"Installo automaticamente i pacchetti mancanti: {modules_to_install}")
    subprocess.run([sys.executable, "-m", "pip", "install", "--user", "-q"] + modules_to_install, check=True, stderr=subprocess.DEVNULL)

import networkx as nx
from pyvis.network import Network

################################################################################
# Verifica e caricamento del file JSON dettagliato
################################################################################
json_file = os.environ.get('GRAPHDATA', 'graph_detailed.json')
if not os.path.exists(json_file):
    print(f"Il file JSON '{json_file}' non esiste, salto la generazione del grafo.")
    sys.exit(0)
with open(json_file, 'r') as f:
    data = json.load(f)

################################################################################
# Costruzione del grafo: ogni record contiene informazioni dettagliate sugli overlap
################################################################################
G = nx.Graph()
for edge in data:
    r1 = edge.get("read1")
    r2 = edge.get("read2")
    overlap = edge.get("overlap_length", 0)
    detailed_info = (
        f"Overlap Length: {edge.get('overlap_length', 'N/A')}\n"
        f"Orientazioni: {edge.get('orientation1', 'N/A')} - {edge.get('orientation2', 'N/A')}\n"
        f"Read {r1} Range: {edge.get('start1', 'N/A')} - {edge.get('end1', 'N/A')}\n"
        f"Read {r2} Range: {edge.get('start2', 'N/A')} - {edge.get('end2', 'N/A')}\n"
        f"Len Read {r1}: {edge.get('len_read1', 'N/A')}\n"
        f"Len Read {r2}: {edge.get('len_read2', 'N/A')}\n"
        f"Fingerprint {r1}: {edge.get('fingerprint_read1', 'N/A')}\n"
        f"Fingerprint {r2}: {edge.get('fingerprint_read2', 'N/A')}\n"
        f"Overlap Region {r1}: {edge.get('overlap_region_read1', 'N/A')}\n"
        f"Overlap Region {r2}: {edge.get('overlap_region_read2', 'N/A')}"
    )
    if r1 is not None and not G.has_node(r1):
        G.add_node(r1, label=f"Read {r1}")
    if r2 is not None and not G.has_node(r2):
        G.add_node(r2, label=f"Read {r2}")
    if r1 is not None and r2 is not None:
        G.add_edge(r1, r2, weight=overlap, title=detailed_info, label=f"Overlap: {overlap}")

################################################################################
# Creazione della visualizzazione interattiva del grafo tramite pyvis
################################################################################
net = Network(height="800px", width="100%", notebook=False)
net.from_nx(G)
graph_html = "detailed_graph.html"
net.show(graph_html, notebook=False)
print(f"Grafo HTML generato con successo: {graph_html}")
EOF
else
  echo "Python non trovato o non disponibile: impossibile creare il grafo HTML."
fi
